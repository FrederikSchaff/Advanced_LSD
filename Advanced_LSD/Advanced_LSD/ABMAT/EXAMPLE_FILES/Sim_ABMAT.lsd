	
Label Root
{
	Son: Model
	Label Model
	{
		Son: ABMAT
		Label ABMAT
		{
			Var: ABMAT_INIT
			Var: ABMAT_UPDATE
			Param: ABMAT_DPM
			Param: ABMAT_Switch
			Param: ABMAT_Sets
			Param: ABMAT_Max_t
			Param: ABMAT_SeqMC_BCc
			Param: ABMAT_SeqMC_Pv
			Param: ABMAT_SeqMC_seed
			Param: ABMAT_Window
			Param: ABMAT_ConfigID

		}


	}


}


DATA

Object: Root C	1

Object: Model C	1

Object: ABMAT C	1
Var: ABMAT_INIT 0 n + n n
Var: ABMAT_UPDATE 0 n + n n
Param: ABMAT_DPM 0 n + n n	1
Param: ABMAT_Switch 0 n + n n	-1
Param: ABMAT_Sets 0 n + n n	1300
Param: ABMAT_Max_t 0 n + n n	1000
Param: ABMAT_SeqMC_BCc 0 n + n n	20
Param: ABMAT_SeqMC_Pv 0 n + n n	0.05
Param: ABMAT_SeqMC_seed 0 n + n n	42
Param: ABMAT_Window 0 n + n n	300
Param: ABMAT_ConfigID 0 n + n n	0

SIM_NUM 4
SEED 1
MAX_STEP 1000
EQUATION fun_El-Farol-Schaff.cpp
 MODELREPORT modelreport.html

DESCRIPTION

Object_Root
(no description available)
END_DESCRIPTION

Object_Model
(no description available)
_INIT_

END_DESCRIPTION

Object_ABMAT
(no description available)
_INIT_

END_DESCRIPTION

Variable_ABMAT_INIT
Initialisation Function
_INIT_

END_DESCRIPTION

Variable_ABMAT_UPDATE
Update function. Should be called at the very end of the simulation run.
_INIT_

END_DESCRIPTION

Parameter_ABMAT_DPM
Choice Design Point Matrix
_INIT_

END_DESCRIPTION

Parameter_ABMAT_Switch
Choice of configuration (>0) or set (<0)
_INIT_

END_DESCRIPTION

Parameter_ABMAT_Sets
Number of sets in which the DPM shall be splitted. Each set stands for a single *.lsd file and a number of runs equal or less to #sets/#configurations
_INIT_

END_DESCRIPTION

Parameter_ABMAT_Max_t
(no description available)
_INIT_

END_DESCRIPTION

Parameter_ABMAT_SeqMC_BCc
The Besag Clifford constant for the sequential analysis. Higher values improve the power of the test. Levels of 10 or 20 are suggested in the original paper.
_INIT_

END_DESCRIPTION

Parameter_ABMAT_SeqMC_Pv
The p-value choice for the sequential Monte Carlo analysis. A default of 0.05 is as good as any choice.
_INIT_

END_DESCRIPTION

Parameter_ABMAT_SeqMC_seed
The seed for the sequential Monte Carlo analysis
_INIT_

END_DESCRIPTION

Parameter_ABMAT_Window
(Specifies the length of the window for the analysis. The length should be sufficient long to guarantee that the overall stationary dynamics are covered.
_INIT_

END_DESCRIPTION

Parameter_ABMAT_ConfigID
*out* - save the configuration ID in [1,n] of the current run. Used for inspection *on the run*.
_INIT_

END_DESCRIPTION


DOCUOBSERVE
ABMAT_UPDATE

END_DOCUOBSERVE


DOCUINITIAL

END_DOCUINITIAL


EQ_FILE
#include "fun_head.h"

#define MAX_WEEKS 5000 //Instead: 2*m and cyclic...

//We initialise the attendance with 25 random values - enough to have a complete
//history for the predictions from day one on.
int attendance[MAX_WEEKS+25];

int predictions[10][20]; //Hold current predictions
int predictions_time[10][20]; //Hold info on last update

double evaluations[10][20]; //Hold current evaluation for each single predictor
int evaluations_time[10][20]; //Hold info on last update

int n_agents; //global parameter storing the number of agents

//function to report the attendance at day day
int get_attendance(int day){
  return attendance[day+24];
}

//prediction function(s)
int prediction(int curday, int strategy, int spec){
  
  //Some checks
  if (t<curday){
    plog("\nError HERE_B");
    quit=2;
    return 0;
  }
  if (spec<1 || spec > 20){
    plog("\nError HERE_C");
    quit=2;
    return 0;
  }
  if (strategy<1 || strategy>10){
    plog("\nError HERE_D");
    quit=2;
    return 0;
  }

  int predict;  
    //Check if prediction needs an update
  if (curday!=predictions_time[strategy-1][spec-1]){
    //Check
    if(curday-1!=predictions_time[strategy-1][spec-1]){
      plog("\nError HERE_F");
      quit=2;
      return 0;
    }
    
    predictions_time[strategy-1][spec-1]=curday;                 

    double trend,MA;

    switch (strategy){
  
      case  1:  //Tit for Tat - same as spec days ago.              
                predict=get_attendance(curday-spec);
                break;
      case  2:  //Mirror - if at day N it was 40%, assume 60%.            
                predict=n_agents - get_attendance(curday-spec);
                break;
      case  3:  //Fixed.              
                predict=(int)round((double)n_agents*(double)spec/20.0);
                break;                         
      case  4:  //Trend, last attendance plus 2 Day trend 
                trend=get_attendance(curday-spec)-get_attendance(curday-spec-1);
                predict=(int)round(get_attendance(curday-1) + trend);
                predict=(int)max(0,min(predict,n_agents));            
                break;
      case  5:  //Opposite Trend, as Trend, but opposite direction
                trend=get_attendance(curday-spec)-get_attendance(curday-spec-1);
                predict=(int)round(get_attendance(curday-1) - trend); 
                predict=(int)max(0,min(predict,n_agents));           
                break;
      case  6:  //Trend2, last attendance plus 2 Day trend (3 day spaced)
                trend=get_attendance(curday-spec)-get_attendance(curday-spec-3);
                predict=(int)round(get_attendance(curday-1) + trend);
                predict=(int)max(0,min(predict,n_agents));            
                break;
      case   7: //Moving Average
                MA=0;
                for (int i=spec;i<spec+5;i++){
                  MA+=get_attendance(curday-i);
                }
                MA/=5.0;
                predict=(int)round(MA);
      case   8: //Opposite Moving Average (i.e. Mirror)
                MA=0.0;
                for (int i=spec;i<spec+5;i++){
                  MA+=get_attendance(curday-i);
                }
                MA/=5.0;
                predict=(int) (n_agents-round(MA));
      case   9:  //Trend3, last attendance plus 2 Day relative trend
                trend=get_attendance(curday-spec)-get_attendance(curday-spec-3);
                trend/=get_attendance(curday-1); //relative to last attendance
                predict=(int)round(get_attendance(curday-1)*(1+trend));
                predict=(int)max(0,min(predict,n_agents));            
                break;
      case  10:  //Opposite Trend3, last attendance minus 2 Day relative trend
                trend=get_attendance(curday-spec)-get_attendance(curday-spec-3);
                trend/=get_attendance(curday-1); //relative to last attendance
                predict=(int)round(get_attendance(curday-1)* (1-trend));
                predict=(int)max(0,min(predict,n_agents));            
                break;                                                                                         
  
    }
    predictions[strategy-1][spec-1]=predict;

  } 
  predict = predictions[strategy-1][spec-1];
  return predict;
}

//According to the netlogo code from Garofalo 2004, the initial values of the 
//performance of all predictors is set to 0.
double evaluation(int curday, int strategy, int spec, double lambda, double prevEval){
  
  //Some checks
  if (t<curday){
    plog("\nError HERE_B");
    quit=2;
    return 0;
  }
  if (spec<1 || spec > 20){
    plog("\nError HERE_C");
    quit=2;
    return 0;
  }
  if (strategy<1 || strategy>10){
    plog("\nError HERE_D");
    quit=2;
    return 0;
  }
  if (lambda < 0 || lambda > 1){
    plog("\nError HERE_E");
    quit=2;
    return 0;
  }
  
  double eval=prevEval*lambda + (1-lambda)* \
                abs( prediction(curday-1, strategy, spec) \
                      - get_attendance(curday-1) ); 

}

//Update evaluations if necessary and return it
double get_evaluation(int curday, int strategy, int spec, double lambda){
  //Some checks
  if (t<curday){
    plog("\nError HERE_B");
    quit=2;
    return 0;
  }
  if (spec<1 || spec > 20){
    plog("\nError HERE_C");
    quit=2;
    return 0;
  }
  if (strategy<1 || strategy>10){
    plog("\nError HERE_D");
    quit=2;
    return 0;
  }           

  //Check if evaluation needs an update
  if (curday!=evaluations_time[strategy-1][spec-1]){
    //Check
    if(curday-1!=evaluations_time[strategy-1][spec-1]){
      plog("\nError HERE_E");
      quit=2;
      return 0;
    }
    
    evaluations_time[strategy-1][spec-1]=curday;
    evaluations[strategy-1][spec-1]= evaluation(curday, strategy, spec, lambda,\
                                       evaluations[strategy-1][spec-1]);
  }
  
  return evaluations[strategy-1][spec-1];
} 

/* To do's

  .Change to make use of the mersenne twister
  .Implement ways to create uniform random numbers with the mersenne twister

*/

MODELBEGIN

FUNCTION("Initialision")

n_agents=(int) VS(p->up,"n_agents");
cur=SEARCH("Agent");
ADDNOBJS(cur,"Strategy",V("k_StrategiesPerAgent")-1); //Add k strategy objects, first exists
ADDNOBJ_EX("Agent",n_agents-1,cur); //Add missing agents

//Assign random strategies, iid.
  //First: Complete Strategy Space
  int StrategySpace[200][2]; //(ID_Category,ID_Specification)
  int StrategyIndex[200];
  int id = 0;
  for (i=0;i<10;i++){
    for (j=0;j<20;j++){
      StrategySpace[id][0]=i+1; //Category from 1 to 10
      StrategySpace[id][1]=j+1; //Specification from 1 to 20
      StrategyIndex[id]=id;
      id++;
      //Initialise the evaluation of each strategy (also non-used ones)  
      evaluations[i][j]=0.0;
      evaluations_time[i][j]=0;
      predictions[i][j]=0;
      predictions_time[i][j]=0;   
    }  
  }
  
  //Next, limit strategy space if necessary by "nulling" randomly strategies
  int excluded_options = 200 - (int) V("K_Strategyspace");
  int remaining_options = 200; 
  while (excluded_options > 0){
    id = (int) rnd_integer(0,remaining_options-1);    
    StrategyIndex[id]=remaining_options-1; //fill with last strategy
    excluded_options--;
    remaining_options--; //remove last strategy
  }
  
  //Check
  if ((int) V("K_Strategyspace")!=remaining_options){
    plog("Error HERE_A");
    quit=2;    
  }
  
  //Next, assign strategies. 

  int swap[2];
  int temp_excluded;
  CYCLE(cur,"Agent"){
    temp_excluded=0;
    CYCLES(cur,cur1,"Strategy"){
      id = (int) rnd_integer(0,remaining_options-1-temp_excluded);
      WRITES(cur1,"Category",StrategySpace[id][0]);
      WRITES(cur1,"Specification",StrategySpace[id][1]);
      //Swap with last strategy in space
      swap[0]=StrategySpace[id][0];
      swap[1]=StrategySpace[id][1];
      StrategySpace[id][0]=StrategySpace[remaining_options-1-temp_excluded][0];
      StrategySpace[id][1]=StrategySpace[remaining_options-1-temp_excluded][1];
      StrategySpace[remaining_options-1-temp_excluded][0]=swap[0];
      StrategySpace[remaining_options-1-temp_excluded][1]=swap[1];
      //And limit strategy space temporarily to prevent drawing the same twice
      temp_excluded++;       
    }
  }

  //Initialise the random attendance in the former 20 weeks.
  //Note: This kind of "global" init differs from Garofalo(2004), where
  //      instead a random attendance is chosen individually each time no knowl.
  //      is given. 
  for (i=0;i<25;i++){
    attendance[i]=(int) round(norm((double)n_agents/2.0,(double)n_agents/20.0));  
    //Note: We should check if this initialisation makes a difference. E.g. init
    //all attendance to max, min, etc.
  }
  
  

RESULT(0.0)


EQUATION("StayOrGo")
/* The agent chooses from his set of predictors the one with highest value and
acts according to it. */
double maxU = 0.0;
int bestGuess;

CYCLE(cur,"Strategy"){
  if ( VS(cur,"Evaluation")>maxU ){
    maxU = VS(cur,"Evaluation");
    bestGuess = (int) VS(cur,"Forcast"); 
  }
}  

double Go = bestGuess > round((double) n_agents * VS(p->up,"p_crowded")) \
            ? 0.0 : 1.0;

RESULT(Go)


EQUATION("Forecast")
/* Update the forecast of the strategy */
double forecast = prediction(t,(int) V("Category"),(int)V("Specification") );
RESULT(forecast)

EQUATION("Evaluation")
/* Update the evaluation of the strategy */
double eval = get_evaluation(t, (int) V("Category"),(int)V("Specification"),\
                              VS(p->up->up,"Lambda") );
RESULT(eval)                              

EQUATION("Attendance")
double attend = 0;
  CYCLE(cur,"Agent"){
    attend+=VS(cur,"StayOrGo");
  }
RESULT(attend)  


MODELEND




void close_sim(void)
{

}



END_EQ_FILE
